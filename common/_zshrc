. ~/.zshrc-pre

if [ -z $DOTFILES ]; then
  export DOTFILES=$HOME/.dotfiles
fi

##############################################################################
# COLORS
##############################################################################

# enable terminal colors
export CLICOLOR=1

# ls colors
if ls --color -d . >/dev/null 2>&1; then
  GNU_LS=1
fi

#if [ $GNU_LS -eq 1 ]; then
#  alias ls='ls --color=auto -CF'
#  eval "`dircolors $DOTFILES/common/dircolors`"
#fi

# grep colors
alias grep='grep --color=auto'

# less colors
export LESS_TERMCAP_mb=$'\e[1;36m'         # begin blinking
export LESS_TERMCAP_md=$'\e[1;36m'         # begin bold
export LESS_TERMCAP_me=$'\e[0m'            # end mode
export LESS_TERMCAP_se=$'\e[0m'            # end standout-mode
export LESS_TERMCAP_so=$'\e[30;43m'        # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\e[0m'            # end underline
export LESS_TERMCAP_us=$'\e[34m'           # begin underline

##############################################################################
# GENERAL
##############################################################################

# load color definitions
autoload -U colors
colors

# enable bash-style word boundaries
autoload -U select-word-style
select-word-style bash

# autocomplete
autoload -U compinit
compinit

zstyle ':completion:*' completer _complete _correct _approximate
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' completer _expand_alias _complete _approximate
zstyle ':completion:*' menu select
zstyle ':completion:*' file-sort name
zstyle ':completion:*' ignore-parents pwd
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# zmv for mass renaming
autoload -Uz zmv

# vi mode
bindkey -v
KEYTIMEOUT=1

# default editor
export EDITOR=vim

# set readline to vi mode
set -o vi

# history settings
export HISTFILE=~/.zsh_history
export HISTSIZE=100000
export SAVEHIST=HISTSIZE
setopt EXTENDED_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_REDUCE_BLANKS
setopt HIST_VERIFY

# reclaim Ctrl-S
stty stop undef

# reclaim Ctrl-Q
stty start undef

unsetopt flowcontrol

##############################################################################
# KEY BINDINGS
##############################################################################

bindkey "^R" history-incremental-search-backward
bindkey "^A" vi-beginning-of-line
bindkey "^E" vi-end-of-line
bindkey "^X" vi-kill-eol

# fix for cursor position
autoload -U history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end

# prevent protected characters
zle -A kill-whole-line vi-kill-line
zle -A backward-kill-word vi-backward-kill-word
zle -A backward-delete-char vi-backward-delete-char

# Debian / Ubuntu sets these to vi-up-line-or-history etc,
# which places the cursor at the start of line, not end of line.
# See: http://www.zsh.org/mla/users/2009/msg00878.html
bindkey -M viins "\e[A" up-line-or-history
bindkey -M viins "\e[B" down-line-or-history
bindkey -M viins "\eOA" up-line-or-history
bindkey -M viins "\eOB" down-line-or-history

# use the vi navigation keys in menu completion
zmodload zsh/complist

bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

##############################################################################
# PROMPT
##############################################################################

# enable variable subtitution in PROMPT
setopt PROMPT_SUBST

# parse name of the git branch in the current directory
parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e "/^[^*]/d" -e "s/* \(.*\)/[\1]/"
}

# 2-line prompt displaying user@host, current dir and the git branch name:
# john@stark ~/.dotfiles [master]
# %
NEWLINE=$'\n'
PROMPT="%{$fg_bold[yellow]%}%~ %{$fg_bold[green]%}\$(parse_git_branch)%{$reset_color%}${NEWLINE}%{$fg_bold[magenta]%}%% %{$reset_color%}"

# print empty line before the prompt
precmd() { print "" }

vim_ins_mode=""
vim_cmd_mode="%{$fg_bold[yellow]%}[cmd]%{$reset_color%}"
vim_mode=$vim_ins_mode

function zle-keymap-select {
  vim_mode="${${KEYMAP/vicmd/${vim_cmd_mode}}/(main|viins)/${vim_ins_mode}}"
  zle reset-prompt
}
zle -N zle-keymap-select

function zle-line-finish {
  vim_mode=$vim_ins_mode
}
zle -N zle-line-finish

# Fix a bug when you C-c in CMD mode and you'd be prompted with CMD mode
# indicator, while in fact you would be in INS mode
# Fixed by catching SIGINT (C-c), set vim_mode to INS and then repropagate the
# SIGINT, so if anything else depends on it, we will not break it
function TRAPINT() {
  vim_mode=$vim_ins_mode
  return $(( 128 + $1 ))
}

RPROMPT='${vim_mode}'

##############################################################################

. $DOTFILES/common/shell-includes/aliases
. $DOTFILES/common/shell-includes/functions

. ~/.zshrc-post

