mcd() {
  mkdir -p $1
  cd $1
}

# Grep for process
psgrep() {
  if [ ! -z $1 ] ; then
    ps aux | grep $1 | grep -v grep
  else
    echo "ERROR: need name to grep for"
  fi
}

scalagrep() {
  if [ ! -z $1 ] ; then
    grep -r --include="*.scala" $1 .
  else
    echo "ERROR: need pattern to grep for"
  fi
}

rm-vimbackup() {
  echo -n "Recursively deleting vim backup files from "
  pwd
  find ./ -name '*~' -exec rm '{}' \; -print -or -name ".*~" -exec rm {} \; -print
}

rm-dsstore() {
  echo -n "Recursively deleting .DS_Store files from "
  pwd
  find ./ -name '.DS_Store' -exec rm -rf '{}' \; -print
}

rm-pyc() {
  echo -n "Recursively deleting .pyc files from "
  pwd
  find ./ -name '*.pyc' -exec rm -rf '{}' \; -print
}

rm-exe-noext() {
  echo -n "Recursively deleting executable files with no extension files from "
  pwd
  find . -type f -perm +111 -regex './[^.]*' -exec rm '{}' \; -print
}

rm-nimcache() {
  echo -n "Recursively deleting nimcache directories from "
  pwd
  find . -type d -name 'nimcache' -print -exec rm -rf '{}' \;
}

function extract {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f $1 ] ; then
      # NAME=${1%.*}
      # mkdir $NAME && cd $NAME
      case $1 in
        *.tar.bz2) tar xvjf $1    ;;
        *.tar.gz)  tar xvzf $1    ;;
        *.tar.xz)  tar xvJf $1    ;;
        *.lzma)    unlzma $1      ;;
        *.bz2)     bunzip2 $1     ;;
        *.rar)     unrar x -ad $1 ;;
        *.gz)      gunzip $1      ;;
        *.tar)     tar xvf $1     ;;
        *.tbz2)    tar xvjf $1    ;;
        *.tgz)     tar xvzf $1    ;;
        *.zip)     unzip $1       ;;
        *.Z)       uncompress $1  ;;
        *.7z)      7z x $1        ;;
        *.xz)      unxz $1        ;;
        *.exe)     cabextract $1  ;;
        *)         echo "extract: '$1' - unknown archive method" ;;
      esac
    else
      echo "$1 - file does not exist"
    fi
  fi
}

function perf {
  curl -L --show-error --write-out 'lookup:        %{time_namelookup}s\nconnect:       %{time_connect}s\nappconnect:    %{time_appconnect}s\npretransfer:   %{time_pretransfer}s\nredirect:      %{time_redirect}s\nstarttransfer: %{time_starttransfer}s\ntotal:         %{time_total}s\n' "$1"
}

# vim: sw=2 ft=sh
